const fetchFromServer = async (type) => {
  try {
    showLoader();
    const response = await fetch(`http://localhost:3000/data?type=${type}`); // Replace the URL with the actual URL of your Node.js server
    if (!response.ok) {
      throw new Error("Network response was not ok");
    }
    const data = await response.json();
    hideLoader();
    renderTrack(data);
    // Use the data in your frontend as needed
  } catch (error) {
    console.error("Error fetching data from the server:", error.message);
  }
};

// Call the function to fetch data from the server
const renderTrack = (data) => {
  const artists = data.track.artists.map((artist) => artist.name).join(", ");
  const musicCoverImage = data.track.album.images.find(
    (image) => image.height === 300
  ).url;
  const songName = data.track.name;
  songName[0].toUpperCase() + songName.slice(1);

  const overlayDiv = document.createElement("div");
  overlayDiv.style.backgroundImage = `url(${musicCoverImage})`;
  overlayDiv.style.backgroundSize = "cover";
  overlayDiv.style.backgroundPosition = "center";
  overlayDiv.style.backgroundRepeat = "no-repeat";
  overlayDiv.style.height = "100vh";
  overlayDiv.style.width = "100vw";
  overlayDiv.style.position = "absolute";
  overlayDiv.style.top = "0";
  overlayDiv.style.left = "0";
  overlayDiv.style.zIndex = "-1";
  overlayDiv.style.opacity = "0.1";

  const trackContainer = document.createElement("div");
  trackContainer.innerHTML = `
      <img src="${musicCoverImage}" alt="Music Cover Image">
      <p class="song-name">${songName}</p>
      <p class="artist-name">${artists}</p>
      <button class="preview-button">Preview</button>
    `;

  const previewButton = trackContainer.querySelector(".preview-button");
  const audio = new Audio(data.track.preview_url);

  previewButton.addEventListener("click", () => {
    if (audio.paused) {
      audio.play();
      previewButton.textContent = "Pause";
    } else {
      audio.pause();
      previewButton.textContent = "Preview";
    }
  });

  audio.addEventListener("ended", () => {
    previewButton.textContent = "Preview";
  });

  document.body.appendChild(overlayDiv); // Append the overlay div first
  document.body.appendChild(trackContainer);
  document.querySelector("#song-container").appendChild(trackContainer);

  const moodOpts = document.querySelectorAll(".mood-opt");

  moodOpts.forEach((mood) => {
    mood.addEventListener("click", () => {
      const type = mood.dataset.type; // Use mood.dataset.type instead of li.dataset.type
      fetchFromServer(type);
    });
  });
};

renderTrack();

//   const selectedOption = document.querySelector('.selected-option');
//   const optionsCon = document.querySelector('.options-con');
//   const moodCon = document.querySelector('.mood-con');

//   let optionsList = [{label:'Give me whatever I\'ll take it',value:"chill"}, {label:"I need a banger afro track",value:"afro"}, {label:"My soul needs to relax",value:"soothing"}, {label:"I need a hard bar (rap)",value:"bars"}];
//   let selected = optionsList[0];

//   const handleSelected = () => selectedOption.innerHTML = selected.label;

//   const handleOption = () => {
//     handleSelected()

//     const options = optionsList.filter(option => option.value !== selected.value);

//     let temp = "";
//     for (let index = 0; index < options.length; index++) {
//       const option = options[index];
//       temp += `<div class="mood-option" data-option='${JSON.stringify(option)}'>${option.label}</div>`;
//     }
//     optionsCon.innerHTML = temp;

//   };

//   handleOption();

//   selectedOption.addEventListener("click", () => {
//     optionsCon.classList.toggle("open");
//     moodCon.classList.toggle("open");
//   })

//   document.addEventListener("click", e => {
//     if(e.target.classList.contains("mood-option")) {
//         selected = JSON.parse(e.target.getAttribute("data-option"));
//         handleOption()
//         optionsCon.classList.remove("open")
//         moodCon.classList.remove("open")
//     }
// })

const gettingMessages = document.querySelectorAll(".getting-mssg");
let currentIndex = 0;

function displayNextMessage() {
  gettingMessages[currentIndex].classList.remove("visible");

  currentIndex = (currentIndex + 1) % gettingMessages.length;

  gettingMessages[currentIndex].classList.add("visible");
}

// Initial display
gettingMessages[currentIndex].classList.add("visible");

// Display the next message every 5 seconds
const interval = setInterval(displayNextMessage, 7000);

// Stop the interval after displaying all messages once
setTimeout(() => {
  clearInterval(interval);
}, 5000 * gettingMessages.length);

const init = () => {
  const currentPage = window.location.pathname;

  switch (currentPage) {
    case "/":
    case "/index.html":
      // Code to handle the behavior on the homepage
      break;
    case "/track.html":
      // Code to handle the behavior on the track page
      fetchAndDisplayTrack(); // Replace with the function that fetches and displays the track
      break;
    // Add more cases for other pages as needed
  }

  // Any common behavior that applies to all pages can be placed here

  // Example: Highlighting the active link
  highlightActiveLink();
};

init();

//   const selectedOption = document.querySelector('.selected-option');
//   const optionsCon = document.querySelector('.options-con');
//   const moodCon = document.querySelector('.mood-con');

//   let optionsList = [{label:'Give me whatever I\'ll take it',value:"chill"}, {label:"I need a banger afro track",value:"afro"}, {label:"My soul needs to relax",value:"soothing"}, {label:"I need a hard bar (rap)",value:"bars"}];
//   let selected = optionsList[0];

//   const handleSelected = () => selectedOption.innerHTML = selected.label;

//   const handleOption = () => {
//     handleSelected()

//     const options = optionsList.filter(option => option.value !== selected.value);

//     let temp = "";
//     for (let index = 0; index < options.length; index++) {
//       const option = options[index];
//       temp += `<div class="mood-option" data-option='${JSON.stringify(option)}'>${option.label}</div>`;
//     }
//     optionsCon.innerHTML = temp;

//   };

//   handleOption();

//   selectedOption.addEventListener("click", () => {
//     optionsCon.classList.toggle("open");
//     moodCon.classList.toggle("open");
//   })

//   document.addEventListener("click", e => {
//     if(e.target.classList.contains("mood-option")) {
//         selected = JSON.parse(e.target.getAttribute("data-option"));
//         handleOption()
//         optionsCon.classList.remove("open")
//         moodCon.classList.remove("open")
//     }
// })

const moodOpts = document.querySelectorAll(".mood-opt");

moodOpts.forEach((mood) => {
  mood.addEventListener("click", () => {
    const type = mood.dataset.type;
    fetchFromServer(type);
  });
});
